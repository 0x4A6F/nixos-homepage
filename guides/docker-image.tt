[% WRAPPER layout.tt hideTitle=1 title="Guide: Install Nix" menu='nixos' %]

<h1>Build a Docker image</h1>

<p>For this section we assume you have Docker installed.</p>

<p><a href="[%root%]guides/dev-environment.html">When you set up the development environment</a>, you created a package of a Flask app. Now you may want to deploy it. One way to do this is to package it as a Docker container that can be hosted on a container hosting platform.</p>

<p>Nix comes with tools for building Docker containers. To turn our Python app into a Docker container, we only have to specify what command to run. Nix will take care of building a minimal image required to make that happen.</p>

<p>Create a file <code>docker.nix</code>:</p>

<pre class="code">
{ pkgs ? import &lt;nixpkgs&gt; {} }:

let
  app = pkgs.callPackage ./default.nix {
    inherit pkgs;
  };

in pkgs.dockerTools.buildImage {
  name = "myapp";
  tag = "latest";
  config = {
    Cmd = [ "${app}/bin/myapp" ];
  };
}
</pre>

<p>We are calling the expression under <code>./default.nix</code> and pass it our own <code>pkgs</code>. Under <code>Cmd</code> we use the variable <code>app</code>to retrieve the path to the executable Python app.</p>

<p>Now we can build the Docker image and load it into Docker:</p>

<pre class="code">
nix-build docker.nix
docker load --input result
</pre>

<p>Now Docker has an image tagged <code>myapp:latest</code>. Run the Docker image and make sure to forward port 5000, so you can access the app in the browser:</p>

<pre class="code">
docker run -it -p 5000:5000 myapp:latest
</pre>

<p>Now you can see the site on <code>http://localhost:5000</code>.</p>

[% END %]
