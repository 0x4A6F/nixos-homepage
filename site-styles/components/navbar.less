// This file defines the navigation bar at the top of the page.

body > header {
	@_height: #theme.navbar[height];
	#no-select();

	position: relative;
	z-index: 10;
	margin-bottom: @gutter;
	#fill-width();
	background: #theme.navbar[background];

	// The light variant of the navbar needs a shadow.
	& when (#theme.navbar[variant] = light) {
		border-bottom: 1*@unit solid rgba(0, 0, 0, 0.2);
		box-shadow: #theme.common[box-shadow];
	}

	// Ensure *everything* in the navbar fills it vertically.
	* {
		line-height: @_height;
	}

	&, a {
		color: #theme.navbar[foreground];
	}

	// The "centered" container is that unsemantic div.
	& > div {
		#container();
		display: flex;
		flex-grow: 1;
		#rules-for-responsive-navbar-narrow({
			flex-direction: column;
		});
	}

	// Children of the unsemantic div are laid out horizontally.
	& > div > * {
		margin: 0;
		min-height: @_height;
		flex-grow: 1;

		#rules-for-responsive-navbar-wide({
			height: @_height;
		});
	}

	// Unlistify lists in navbar
	ul, li {
		list-style-type: none;
	}

	// Links are block types here, so that they fill the area.
	a {
		display: block;
	}

	// This ends up being replaced by the logo.
	h1 {
		font-size: 1.2em;
		#rules-for-responsive-navbar-narrow({
			padding-left: @gutter;
		});
	}

	// NixOS-specific customization of the navbar brand.
	// This uses the usual tricks to shove the text outside of the visible area,
	// to replace it with the pre-rendered paths.
	// It is using separate images for the logo and the text.
	h1 > a {
		// 50px logo height in the mockups
		// 464 is the logo height in the svg document, which is 517 tall
		@_lambdaflake_height: 50 * 517 / 464 * @unit;

		// Use three's complement to automatically compute the widths.
		@_lambdaflake_width: @_lambdaflake_height * 587/517;
		@_nixos_text_width: @_lambdaflake_height * 1059/516;

		#text-replacement(
			@image-rules: {
				// Causes the pseudo-element to stick to the left.
				right: initial;
			},
			@pseudo: before,
			@width: @_lambdaflake_width,
			@height: @_height,
		);

		// Select according to the variant
		&::before when (#theme.navbar[variant] = light) {
			#svg.lambdaflake.color();
		}
		&::before when not (#theme.navbar[variant] = light) {
			#svg.lambdaflake.white();
		}


		#text-replacement(
			@image-rules: {
				// Causes the pseudo-element to stick to the right.
				left: initial;
			},
			@pseudo: after,
			@width: @_nixos_text_width,
			@height: @_height,
		);
		// Select according to the variant
		&::after when (#theme.navbar[variant] = light) {
			#svg.nixos-text.black();
		}
		&::after when not (#theme.navbar[variant] = light) {
			#svg.nixos-text.white();
		}

		// We can't rely on what `#text-replacement` gives us since we're doing it twice.
		// So we simply add them up here :)
		width: @_lambdaflake_width + @_nixos_text_width;

		padding: 0;
		margin-right: @gutter;
	}

	nav .button {
		margin-left: @gutter / 2;
	}

	.header-search {
		display: flex;
		align-items: center;
		flex-grow: 1;
		padding-left: @gutter / 2;
		padding-right: @gutter / 2;
		& > .form-input {
			input {
				background-color: transparent;
			}
			flex-grow: 1;
			.form-input.with-icon({
				#svg.icon.search.blue-light;
			});
		}

		#screen-md-max({
			// FIXME: pop out search like for `xs`
			display: none;
		});
	}

	nav > ul {
		margin: 0;
		padding: 0;
		display: flex;
		#rules-for-responsive-navbar-wide({
			justify-content: flex-end;
			align-items: center;

			// Force align the *text's* right to the last column's right.
			// Preferrable than removing the link's right padding. Removing the
			// right padding will reduce the clickable and touchable target size.
			// (Disabled because a button won't have that issue)
			// position: relative;
			// left: @gutter;
		});
		#rules-for-responsive-navbar-narrow({
			flex-direction: column;
		});
	}

	a {
		white-space: nowrap;
		text-decoration: none;
		padding-left:  15*@unit;
		padding-right: 15*@unit;
		#screen-sm-only({
			padding-left:  10*@unit;
			padding-right: 10*@unit;
		});
		&:hover, &:focus, &:active {
			text-decoration: none;
		}
	}

	#screen-sm-only({
		// When the site is narrow, but not quite xs, prefer filling
		// the width with the menu instead of using the hamburglar menu.
		& > div {
			max-width: initial;
			padding-left: @gutter;
			padding-right: @gutter;
		}
	});
	#screen-sm-max({
		li.install-nix {
			display: none;
		}
	});
}

// Static navbar
// =============

& when (#theme.navbar[static] = true) {
	body > header {
		position: static;
		top: 0;
		left: 0;
		right: 0;
		z-index: 1050;
		#rules-for-responsive-navbar-wide({
			position: fixed;
		});
	}

	body {
		#rules-for-responsive-navbar-wide({
			padding-top: #theme.navbar[height] + @gutter;
		});
	}

	[id] {
		scroll-margin-top: #theme.navbar[height] + @gutter * 2;
	}
}

// Navbar mixins
// =============

// Responsive rules for when the collapsible menu is not in use.
// REMINDER: Prefer setting the responsive rules first; override for larger widths. 
#rules-for-responsive-navbar-wide(@rules) {
	#screen-sm-min({
		@rules();
	});
}

// Responsive rules for when the collapsible menu is in use.
#rules-for-responsive-navbar-narrow(@rules) {
	#screen-xs-max({
		@rules();
	});
}
