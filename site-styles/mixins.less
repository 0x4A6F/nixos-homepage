
// Layout mixins
// =============

// For elements that are intended to fill the width of the page, generally
// to fill with a colour or pattern.
#fill-width() {
	// For narrow viewports, correctly fix margins and paddings
	#screen-xs-max({
		margin-left: -@gutter;
		margin-right: -@gutter;
		padding-left: @gutter;
		padding-right: @gutter;
	});
}

// For elements that are "container widths", meaning they take the width of
// the page.
#container() {
	margin: auto;
	width: 100%;
	#screen-sm-min({ max-width: (unit(@screen-sm) - 2*@gutter) * @unit; });
	#screen-md-min({ max-width: (unit(@screen-md) - 2*@gutter) * @unit; });
	#screen-lg-min({ max-width: (unit(@screen-lg) - 2*@gutter) * @unit; });
}

// Utility mixins
// ==============

// Opinionated way to make a *layout* with flexible automatic rows, with
// consistent spacing between elements.
// Use this for main *layout* purpose, where you have a wrapper element per
// "columned" items.
#flex-flexible-spacing(@size) {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-content: stretch;

	// This is a horrible hack
	// We shift the whole container left so we can freely add "margins" to
	// the right of every elements...
	position: relative;
	left: -@size;

	& > * {
		// Sane default here
		flex-grow: 1;

		padding-right: @size;
		// Since everything is shifted left, don't forget to shift it back
		// to the right!
		position: relative;
		left: @size;
	}
}

// Same as the precedent, but less opinionated.
// This one uses margin as spacing.
#flex-flexible-margin-between(@size) {
	display: flex;
	flex-wrap: wrap;

	// This is a horrible hack
	// We shift the whole container left so we can freely add "margins" to
	// the right of every elements...
	position: relative;
	margin-left: @size;
	left: -@size;

	& > * {
		margin-right: @size;
		// Since everything is shifted left, don't forget to shift it back
		// to the right!
		position: relative;
		left: @size;
	}
}

// Sets the given @prop to @color modulated by @opacity.
// Useful to re-use an existing colour variable with a new opacity value.
#translucent(@prop, @color, @opacity) {
	@{prop}: rgba(red(@color), green(@color), blue(@color), @opacity);
}

// Use sparingly.
#no-select {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	cursor: default;
}

// `vh` unit is completely useless because of the way they are
// implemented. Browsers that hide and show their user interface
// depending on the scroll action of the user will have a `vh` unit
// that varies wildly while scrolling.
//
// This, in turn, causes needless layout re-computation when `vh` is
// used.
//
// This works around the issue by using the aspect ratio of the device
// to determine a ballpark value in vw.
//
// This is used by passing a property name and a desired value.
#vh-replacement(@prop, @vh) {
    @_urlbar: 1 - 9/100;
    @media screen {
        @{prop}: @vh * 1vh;
    }
    .__vhhack(@width, @height) {
        @media screen and (max-device-aspect-ratio: @width/@height) {
			// Use a browser-side calc
            @{prop}: calc(~"100vw * (@{height}/@{width}*(@{vh}/100)) * @{_urlbar}");
        }
    }

    // Ratios defined here have to go from bigger to smaller.
    .__vhhack( 3,  4); // 0.75
    .__vhhack( 2,  3); // 0.66_
    .__vhhack(10, 16); // 0.62_
    .__vhhack( 9, 16); // 0.56_
}

// Uses a pseudo-element @pseudo (by default :before) to replace the
// text content (can be empty) with an image.
//
// The @image-rules argument is used like this:
//
// #text-replacement(
//     @image-rules {
//         background-image: ... ; // or...
//         #svg-some-mixin();
//     },
// )

#text-replacement(
	@pseudo: before,
	@width: auto,
	@height: auto,
	@image-rules: {},
) {
	&:extend(.__text-replacement_common all);
	width: @width;
	height: @height;

	&:@{pseudo} {
		&:extend(.__text-replacement_common_pseudo all);
		width: @width;
		height: @height;
		@image-rules();

	}
}

// The following two classes are used with `extend` to reduce
// duplication in the generated stylesheet.
.__text-replacement_common {
	position: relative;
	text-indent: -9999px;
	overflow: hidden;
}
.__text-replacement_common_pseudo {
	content: "";
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	background-size: contain;
	background-repeat: no-repeat;
	background-position: center center;
	display: inline-block;
}
